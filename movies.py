# -*- coding: utf-8 -*-
"""movies.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14L6sy9XQ0EFuBikAqb2SIJyltmk1TUY_
"""

# @title Default title text
import numpy as np
import pandas as pd
# data extraction
import ast
def convert(obj):
    l=[]
    for i in ast.literal_eval(obj):
        l.append(i['name'])
    return l
def fetch_director(obj):
    l=[]
    for i in ast.literal_eval(obj):
        if i['job']=='Director':
            l.append(i['name'])
            break
    return l
def convert3(obj):
    l=[]
    counter=0
    for i in ast.literal_eval(obj):
        if counter!=3:
            l.append(i['name'])
            counter+=1
        else:
            break
    return l
movies = pd.read_csv("tmdb_5000_movies.csv")
credit =pd.read_csv("tmdb_5000_credits.csv")
movies=movies.merge(credit,on='title')

# important columns
# genres
# id
# keyword
# title
# overview
movies = movies[['genres','movie_id','keywords','title','overview','cast','crew']]
# remove missing and duplicate data
movies.isnull().sum()
movies.dropna(inplace=True)
movies.duplicated().sum()
movies.head(1)['genres']
genres=movies.iloc[0].genres

movies['genres']=movies['genres'].apply(convert)
movies['keywords']=movies['keywords'].apply(convert)


movies['cast']=movies['cast'].apply(convert3)
director=[]

movies['crew']=movies['crew'].apply(fetch_director)
print(movies['crew'])
movies['overview']=movies['overview'].apply(lambda x:x.split())
movies.head(2)
# now removing space between words
movies['genres']=movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew']=movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])
movies['overview']=movies['overview'].apply(lambda x:[i.replace(" ","") for i in x])

movies['tags']=movies['overview']+movies['genres']+movies['keywords']+movies['cast']+movies['crew']
# movies.head(2)
new_df=movies[['movie_id','title','tags']]
new_df['tags']=new_df['tags'].apply(lambda x:" ".join(x))
new_df['tags']=new_df['tags'].apply(lambda x:x.lower())
new_df.head(2).values
new_df['tags'][0]

#text vectorization
# basically we want to make a english dictionary and using countvertorizer we can easily do it


from sklearn.feature_extraction.text import CountVectorizer
# make a object of it and pass the max_features,stop_words means the english words which helps to make the sentences like a ,an, the , and ,is ,am ,are etc
cv=CountVectorizer(max_features=5000,stop_words='english')
# using transform we call fit_transform and pass the dataframe in that and call the toarray() to dissolve it into an array which comes
vectors=cv.fit_transform(new_df['tags']).toarray()
vectors[0]
cv.get_feature_names_out()

import nltk
nltk.download('punkt')
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
def stem(text):
    y = []
    for i in text.split():
        y.append(ps.stem(i))
    return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)
from sklearn.metrics.pairwise import cosine_similarity
similarity=cosine_similarity(vectors)

def recommend(m):
  if m not in new_df['title'].values:
        print(f"Movie '{m}' not found in the dataset.")
        return
  movie_index=new_df[new_df['title']==m].index[0]
  distances = similarity[movie_index]
  movies_list=sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend('Avatar')

# pkl
import pickle
pickle.dump(new_df.to_dict(),open('movies_dict.pkl','wb'))
pickle.dump(similarity,open('similarity.pkl','wb'))

# building website
# using streamlit.io

# prompt: now using streamlit,pickle and pandas make a website
import streamlit as st
import pickle
import pandas as pd

# Load the pickled data
movies_dict = pickle.load(open('movies_dict.pkl', 'rb'))
similarity = pickle.load(open('similarity.pkl', 'rb'))

movies = pd.DataFrame(movies_dict)

# Streamlit app
st.title('Movie Recommender System')

selected_movie_name = st.selectbox(
    'Select a movie',
    movies['title'].values
)

if st.button('Recommend'):
    def recommend(movie):
        movie_index = movies[movies['title'] == movie].index[0]
        distances = similarity[movie_index]
        movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]
        recommended_movies = []
        for i in movies_list:
            recommended_movies.append(movies.iloc[i[0]].title)
        return recommended_movies
    recommendations = recommend(selected_movie_name)
    for i in recommendations:
        st.write(i)